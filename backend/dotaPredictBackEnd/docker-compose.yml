
services:
  dotapredict-api:
    container_name: dotapredict-api
    build: .
    ports:
      - "8000:8000"
    environment:
      - DOTAPREDICT_USER=postgres
      - DOTAPREDICT_PASSWORD=postgres
      - DOTAPREDICT_DB=postgres
      - DOTAPREDICT_HOST=db
      - DOTAPREDICT_PORT=5432
    depends_on:
      - db
      - kafka
    entrypoint: ["/app/django.sh"]

  db:
    container_name: db
    image: postgres:12
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  # kafka related services
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  kafka-producer:
    container_name: kafka-producer
    build: .
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - STEAM_API_KEY=${STEAM_API_KEY}
      - SYNC_INTERVAL=30
    restart: unless-stopped
    command: ["python", "matchapp/kafka_producer.py"]

  kafka-consumer:
    container_name: kafka-consumer
    build: .
    depends_on:
      - kafka
      - dotapredict-api
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DJANGO_API_URL=http://dotapredict-api:8000
    restart: unless-stopped
    command: ["python", "matchapp/kafka_consumer.py"]

volumes:
  pgdata: {}